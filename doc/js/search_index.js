var search_data = {"index":{"searchIndex":["codeclimate","csgraph","csound","fscoreline","iscoreline","scoreline","dsl","definitions","exceptions","syntaxerror","instr","line","pfield","pfieldexpression","reader","exceptions","purevirtualmethod","renderer","object","+()","-()","coerce()","compile()","create()","csg_require()","define()","instr()","instr()","line()","method_missing()","new()","new()","new()","new()","new()","new()","new()","render()","render()","render()","render()","render()","render()","render()","value()","value()","gemfile","license","readme","rakefile","setup","csgraph.gemspec","really_wrong.csg","simple_0.csg","simple_1.csg","simple_minus_constants.csg","simple_plus_constants.csg","simple.csd"],"longSearchIndex":["codeclimate","csgraph","csgraph::csound","csgraph::csound::fscoreline","csgraph::csound::iscoreline","csgraph::csound::scoreline","csgraph::dsl","csgraph::dsl::definitions","csgraph::dsl::exceptions","csgraph::dsl::exceptions::syntaxerror","csgraph::dsl::instr","csgraph::dsl::line","csgraph::dsl::pfield","csgraph::dsl::pfieldexpression","csgraph::dsl::reader","csgraph::exceptions","csgraph::exceptions::purevirtualmethod","csgraph::renderer","object","csgraph::dsl::pfield#+()","csgraph::dsl::pfield#-()","csgraph::dsl::pfield#coerce()","csgraph::csound::scoreline::compile()","csgraph::dsl::pfield::create()","csgraph::dsl::reader#csg_require()","csgraph::dsl::definitions#define()","csgraph::csound::iscoreline#instr()","csgraph::dsl::definitions#instr()","csgraph::dsl::instr#line()","csgraph::dsl::instr#method_missing()","csgraph::csound::scoreline::new()","csgraph::dsl::exceptions::syntaxerror::new()","csgraph::dsl::instr::new()","csgraph::dsl::line::new()","csgraph::dsl::pfield::new()","csgraph::dsl::pfieldexpression::new()","csgraph::renderer::new()","csgraph::csound::fscoreline#render()","csgraph::csound::iscoreline#render()","csgraph::csound::scoreline#render()","csgraph::dsl::definitions#render()","csgraph::dsl::instr#render()","csgraph::dsl::line#render()","csgraph::renderer#render()","csgraph::dsl::pfield#value()","csgraph::dsl::pfieldexpression#value()","","","","","","","","","","","",""],"info":[["CodeClimate","","CodeClimate.html","",""],["Csgraph","","Csgraph.html","",""],["Csgraph::Csound","","Csgraph/Csound.html","",""],["Csgraph::Csound::FScoreLine","","Csgraph/Csound/FScoreLine.html","",""],["Csgraph::Csound::IScoreLine","","Csgraph/Csound/IScoreLine.html","",""],["Csgraph::Csound::ScoreLine","","Csgraph/Csound/ScoreLine.html","",""],["Csgraph::DSL","","Csgraph/DSL.html","",""],["Csgraph::DSL::Definitions","","Csgraph/DSL/Definitions.html","","<p><code>Definitions</code>\n<p><code>Definitions</code> is the container class that holds all the\ninstructions to build a graph out of …\n"],["Csgraph::DSL::Exceptions","","Csgraph/DSL/Exceptions.html","",""],["Csgraph::DSL::Exceptions::SyntaxError","","Csgraph/DSL/Exceptions/SyntaxError.html","",""],["Csgraph::DSL::Instr","","Csgraph/DSL/Instr.html","","<p><code>Definition</code>\n<p>Technically, <code>Definition</code>, is the class that holds the full\ndefinition of a graph to build for …\n"],["Csgraph::DSL::Line","","Csgraph/DSL/Line.html","",""],["Csgraph::DSL::PField","","Csgraph/DSL/PField.html","","<p><code>PField</code>\n"],["Csgraph::DSL::PFieldExpression","","Csgraph/DSL/PFieldExpression.html","","<p><code>PFieldExpression</code>\n"],["Csgraph::DSL::Reader","","Csgraph/DSL/Reader.html","",""],["Csgraph::Exceptions","","Csgraph/Exceptions.html","",""],["Csgraph::Exceptions::PureVirtualMethod","","Csgraph/Exceptions/PureVirtualMethod.html","",""],["Csgraph::Renderer","","Csgraph/Renderer.html","","<p><code>Renderer</code>\n<p>this class is responsible for the csound score reading It is expected to\nwork well with any csound …\n"],["Object","","Object.html","",""],["+","Csgraph::DSL::PField","Csgraph/DSL/PField.html#method-i-2B","(other)",""],["-","Csgraph::DSL::PField","Csgraph/DSL/PField.html#method-i-2D","(other)",""],["coerce","Csgraph::DSL::PField","Csgraph/DSL/PField.html#method-i-coerce","(other)","<p>+coerce(other)+\n<p>this method is needed to perform the addition with Numeric and the like\n"],["compile","Csgraph::Csound::ScoreLine","Csgraph/Csound/ScoreLine.html#method-c-compile","(line)",""],["create","Csgraph::DSL::PField","Csgraph/DSL/PField.html#method-c-create","(arg)",""],["csg_require","Csgraph::DSL::Reader","Csgraph/DSL/Reader.html#method-i-csg_require","(filename)","<p>+csg_require(filename)+\n<p><code>csg_require</code> loads a &#39;.csg&#39; tagged file, adding a\n<code>.csg</code> suffix if needed. …\n"],["define","Csgraph::DSL::Definitions","Csgraph/DSL/Definitions.html#method-i-define","(&block)",""],["instr","Csgraph::Csound::IScoreLine","Csgraph/Csound/IScoreLine.html#method-i-instr","()",""],["instr","Csgraph::DSL::Definitions","Csgraph/DSL/Definitions.html#method-i-instr","(*args, &block)","<p><code>instr(*args, &amp;block)</code>\n<p>the <code>instr</code> method accept a variable number of arguments which\nare all instrument …\n"],["line","Csgraph::DSL::Instr","Csgraph/DSL/Instr.html#method-i-line","(xstart, xend, ystart, yend, options = {})",""],["method_missing","Csgraph::DSL::Instr","Csgraph/DSL/Instr.html#method-i-method_missing","(methId)","<p><code>method_missing(methId)</code>\n"],["new","Csgraph::Csound::ScoreLine","Csgraph/Csound/ScoreLine.html#method-c-new","(l, p = [])",""],["new","Csgraph::DSL::Exceptions::SyntaxError","Csgraph/DSL/Exceptions/SyntaxError.html#method-c-new","(bt)",""],["new","Csgraph::DSL::Instr","Csgraph/DSL/Instr.html#method-c-new","(n, &block)",""],["new","Csgraph::DSL::Line","Csgraph/DSL/Line.html#method-c-new","(xs, xe, ys, ye, opts = {})",""],["new","Csgraph::DSL::PField","Csgraph/DSL/PField.html#method-c-new","(n)",""],["new","Csgraph::DSL::PFieldExpression","Csgraph/DSL/PFieldExpression.html#method-c-new","(l, r, o)",""],["new","Csgraph::Renderer","Csgraph/Renderer.html#method-c-new","(sfn, csg, os = STDOUT)",""],["render","Csgraph::Csound::FScoreLine","Csgraph/Csound/FScoreLine.html#method-i-render","(ostream)",""],["render","Csgraph::Csound::IScoreLine","Csgraph/Csound/IScoreLine.html#method-i-render","(ostream)",""],["render","Csgraph::Csound::ScoreLine","Csgraph/Csound/ScoreLine.html#method-i-render","(ostream)","<p>+render(ostream)+\n<p>This is an pure virtual method which should raise an exception when called\n"],["render","Csgraph::DSL::Definitions","Csgraph/DSL/Definitions.html#method-i-render","(sl, os)","<p><code>render(score_line, output_stream)</code>\n<p>This is where the whole sha-bang takes place. <code>CsGraph.render</code>\nwill pick …\n"],["render","Csgraph::DSL::Instr","Csgraph/DSL/Instr.html#method-i-render","(sl, os)","<p><code>render(score_line, output_stream)</code>\n<p><code>render</code> passes the score_line onto each <code>feature</code> to\ndo the final rendering …\n"],["render","Csgraph::DSL::Line","Csgraph/DSL/Line.html#method-i-render","(sl, os)","<p><code>render(score_line, output_stream)</code>\n<p>this is actually one of the possible final +render+s of csgraph: values …\n"],["render","Csgraph::Renderer","Csgraph/Renderer.html#method-i-render","()",""],["value","Csgraph::DSL::PField","Csgraph/DSL/PField.html#method-i-value","(sl)","<p><code>value(score_line)</code>\n<p><code>value</code> gets a score line and extracts the proper value\naccording to the <code>p-field</code> number …\n"],["value","Csgraph::DSL::PFieldExpression","Csgraph/DSL/PFieldExpression.html#method-i-value","(sl)","<p><code>value(score_line)</code>\n<p><code>value</code> gets a score line and extracts the proper value\naccording to the expression contained …\n"],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p># Specify your gem&#39;s dependencies in csgraph.gemspec gemspec\n<p>group :test …\n"],["LICENSE","","LICENSE.html","","\n<pre>                   GNU GENERAL PUBLIC LICENSE\n                      Version 2, June 1991\n\nCopyright (C) ...</pre>\n"],["README","","README_md.html","","<p>Csgraph\n<p><img src=\"https://badges.gitter.im/Join%20Chat.svg\">\n<img\nsrc=\"https://travis-ci.org/nicb/csgraph.svg?branch=master\"> ...\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks”\n<p>begin\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;byebug&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;rspec/core/rake_task&#39;</span>\n\n<span class=\"ruby-constant\">RSpec</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">Core</span><span class=\"ruby-operator\">::</span><span class=\"ruby-constant\">RakeTask</span>.<span class=\"ruby-identifier\">new</span>(:<span class=\"ruby-identifier\">test</span>)\n</pre>\n"],["setup","","bin/setup.html","","<p>#!/bin/bash set -euo pipefail IFS=$&#39;nt&#39;\n<p>bundle install\n<p># Do any other automated setup that you …\n"],["csgraph.gemspec","","csgraph_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"],["really_wrong.csg","","spec/fixtures/csg/really_wrong_csg.html","","<p># # This is a file which does not observe the DSL syntax to see how error #\nrecovery works. #\n<p>this is …\n"],["simple_0.csg","","spec/fixtures/csg/simple_0_csg.html","","<p># # this is the simplest possible csg file # # It defines the reading\nmechanism for instr 1 # to read …\n"],["simple_1.csg","","spec/fixtures/csg/simple_1_csg.html","","<p># # this is (almost) the simplest possible csg file # # It defines the\nreading mechanism for instr 1-4 …\n"],["simple_minus_constants.csg","","spec/fixtures/csg/simple_minus_constants_csg.html","","<p># # this is a simple file which subtracts constants to some p-fields # # It\ndefines the reading mechanism …\n"],["simple_plus_constants.csg","","spec/fixtures/csg/simple_plus_constants_csg.html","","<p># # this is a simple file which add constants to some p-fields # # It\ndefines the reading mechanism for …\n"],["simple.csd","","spec/fixtures/csound/simple_csd.html","","<p>&lt;CsoundSynthesizer&gt; ;&lt;CsOptions&gt; ;&lt;/CsOptions&gt; ;\n============================================== …\n"]]}}